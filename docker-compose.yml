version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: hackathon-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: hackathon2025
      MONGO_INITDB_DATABASE: hackathon-hub
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - hackathon-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: hackathon-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:hackathon2025@mongodb:27017/hackathon-hub?authSource=admin
      JWT_SECRET: super-secure-jwt-secret-for-production-change-this
      JWT_EXPIRE: 7d
      CLIENT_URL: http://localhost:8081
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - hackathon-network
    volumes:
      - ./server/logs:/app/logs
    # healthcheck:
    #   test: [ "CMD", "curl", "-f", "http://localhost:5000/api/health" ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

    # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hackathon-frontend
    restart: unless-stopped
    ports:
      - "8081:80"
    depends_on:
      backend:
        condition: service_started
    networks:
      - hackathon-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80" ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local

networks:
  hackathon-network:
    driver: bridge
